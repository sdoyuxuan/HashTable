#include<iostream>
#include <vector>
using namespace std;
enum State
{
	EMPTY, EXIST, DELETE
};
const int _PrimeSize = 28;
static const unsigned long _PrimeList[_PrimeSize] =
{
	53ul, 97ul, 193ul, 389ul, 769ul,
	1543ul, 3079ul, 6151ul, 12289ul, 24593ul,
	49157ul, 98317ul, 196613ul, 393241ul, 786433ul,
	50331653ul, 100663319ul, 201326611ul, 402653189ul, 805306457ul,
	1610612741ul, 3221225473ul, 4294967291ul
};
template<class K, class V>
struct HashElem
{
	pair<K, V>  _kv;
	State _s;

	HashElem()
		: _s(EMPTY)
	{}
};


static size_t BKDRHash(const char * str)
{
	unsigned int seed = 131; // 31 131 1313 13131 131313	
	unsigned int hash = 0;
	while (*str)
	{
		hash = hash * seed + (*str++);
	}
	return (hash & 0x7FFFFFFF); // 防止在外界这个无符号数和有符号数发生运算时而造成的溢出，所以在这里把返还值控制在有符号正数的范围。列如外界用int接受这个返回值如果不做处理可能外界接受的是负值就会造成不正确的结果
	                            //这里可以将结果模上 hash % 0x7fffffff 效果一样 一个用的是div指令将edx中的余数返回 一个用的and指令
}

template <class K>
class _HashFun
{
public:
	K operator ()(K key)
	{
		return key;
	}
};
template<>
class _HashFun<string>
{
public:
	size_t operator()(const string&key)
	{
		return BKDRHash(key.c_str());
	}
};
size_t GetNextPrime(size_t size)
{
	size_t idx = 0;
	while (size > _PrimeList[idx]) idx++;
	return _PrimeList[idx];
}
// 线性探测
template<class K, class V, class HashFunc = _HashFun<K>, bool IsLine = true>
class HashTable
{
public:
	typedef HashElem<K, V> Node;
public:
	
	HashTable(size_t size = 12)
		: _size(0)
	{
		_table.resize(GetNextPrime(size));  // resize 之后容量大小就等于 resize
	}
	bool Insert(const K& key, const V& value)
	{
		_CheckTable();
		size_t addr = _HashFunc(key);
		size_t i = 1;
		size_t m = (_table.size()-1)/2;
		while (_table[addr]._s == EXIST)
		{
			if (_table[addr]._kv.first == key)
			{
				return false;
			}
			if (IsLine)
			{
				addr = HashFunc1(addr);
			}
			else
			{
				addr = HashFunc2(addr, i);   //二次探测因为是跳着找的，所以找到可查位置效率可能很低...
				i = (++i<m) ? i : m;        //具体看课件 这里 i最大为 表大小的一半。 条件表达式 比 if...else 用起来 要好点 不浪费指令周期..
			}
			if (addr > _table.size()||addr==_table.size())  // 因为容量不可能满所以总是可以找到插入位置
			{
				addr = 0;
			}
		}
		_table[addr]._kv.first = key;
		_table[addr]._kv.second = value;
		_table[addr]._s = EXIST;
		_size++;
	}

	pair<HashElem<K, V>*, bool> Find(const K& key)
	{
			size_t addr = _HashFunc(key);
			while (_table[addr]._s == EXIST||_table[addr]._s==DELETE)
			{
				if (_table[addr]._kv.first == key)
				{
					return make_pair(&_table[addr], true);
				}
				addr++;
			}
			return make_pair((Node*)NULL, false);
	}

	bool Remove(const K& key)
	{
		pair<Node*, bool> ret = Find(key);
		if (ret.second == false) return false;
		else
		{
			ret.first._s = DELETE;
			return true;
		}
	}

private:
	size_t _HashFunc(const K& key)
	{
		return HashFunc()(key) % _table.size();
	}
	// 线性探测处理函数
	size_t HashFunc1(size_t hashAddr)
	{
		return hashAddr + 1;
	}
	// 二次探测处理函数
	size_t HashFunc2(size_t hashAddr, size_t i)  //   公式  addr+Ho^2  Ho=1,2,3,4,5.....  (m-1)/2  m为表的大小。
	{
		return (hashAddr + i*i)%_table.size();
	}

	void _CheckTable()
	{
		if ((_size * 10) /_table.size() > 7)
		{
			HashTable<K,V,HashFunc,IsLine> Newtable;
			Newtable._table.resize(GetNextPrime(_table.size()+1));//在素数表内申请刚好比之前素数大小大一位的数字
			for (size_t idx = 0; idx < _table.size(); idx++) // 这里运用了 swapandcopy技术
 			{
				Newtable.Insert(_table[idx]._kv.first,_table[idx]._kv.second);
			}
			Swap(Newtable);
		}
	}

	void Swap(HashTable<K, V>& ht)
	{
		//_table.swap(ht._table);
		_table.swap(ht._table);
		swap(_size, ht._size);
	}

private:
	vector<HashElem<K, V>> _table;
	size_t _size;  // 有效元素的个数  , 因为已经resize了故 vector生成的表的size()函数返回的是 表的大小而不是有效元素个数了，所以得自己定义一个
};
void test()
{
	HashTable<int, int> a;
	for (size_t idx = 0; idx < 10; idx++)
	{
		a.Insert(idx, idx+1);
	}
	if (a.Find(2).second) cout << "Find for 2" << endl;
}
void test2()
{
	HashTable<string, int> a;
	a.Insert("1111", 1);
	a.Insert("2222", 2);
	a.Insert("3333", 3);
	if (a.Find("1111").second) cout << "find for 1111" << endl;
}
int main()
{
	test();
	test2();
	return 0;
}
